using System;
using NinjaTrader.Cbi;
using NinjaTrader.NinjaScript.StrategyAnalyzer;

namespace NinjaTrader.NinjaScript.StrategyAnalyzer
{
    public class MyStrategy : StrategyAnalyzerBase
    {
        private SMA fastSMA;
        private SMA slowSMA;

        protected override void OnStateChange()
        {
            if (State == State.SetDefaults)
            {
                Description = @"Enter the description for your new custom Strategy Analyzer";
                Name = "MyStrategy";
                Calculate = Calculate.OnEachTick;
                EntriesPerDirection = 1;
                EntryHandling = EntryHandling.AllEntries;
                IsExitOnSessionCloseStrategy = true;
                ExitOnSessionCloseSeconds = 30;
                IsFillLimitOnTouch = false;
                MaximumBarsLookBack = MaximumBarsLookBack.TwoHundredFiftySix;
                OrderFillResolution = OrderFillResolution.Standard;
                Slippage = 0;
                StartBehavior = StartBehavior.WaitUntilFlat;
                TimeInForce = TimeInForce.Gtc;
                TraceOrders = false;
                RealtimeErrorHandling = RealtimeErrorHandling.StopCancelClose;
            }
            else if (State == State.Configure)
            {
                fastSMA = SMA(14);
                slowSMA = SMA(28);
            }
        }

        protected override void OnBarUpdate()
        {
            if (BarsInProgress != 0) return;

            // Check for crossover
            if (CrossAbove(fastSMA, slowSMA, 1))
            {
                // Buy logic here
                EnterLong(1, "FastSMA CrossAbove");
            }
            else if (CrossBelow(fastSMA, slowSMA, 1))
            {
                // Sell logic here
                EnterShort(1, "FastSMA CrossBelow");
            }
        }
    }
}
